/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import { useEffect, useRef, useState } from "react";
import { DoubleSide, Group } from "three";
import * as THREE from "three";
import { GLTF } from "three-stdlib";
import { useAnimations, useGLTF, useTexture } from "@react-three/drei";
import { DeviceData } from "../../constants/ProjectsData.ts";
import useTimeout from "../../hooks/useTimeout.ts";
import { modelPath, texturePath } from "../../utils/ResourcesUtils.ts";
import { useControls } from "leva";

type GLTFResult = GLTF & {
    nodes: {
        back: THREE.Mesh;
        Cylinder: THREE.Mesh;
        Cylinder_1: THREE.Mesh;
        btn_power: THREE.Mesh;
        btn_volume: THREE.Mesh;
        Cylinder001: THREE.Mesh;
        Cylinder001_1: THREE.Mesh;
        screen: THREE.Mesh;
        smartphone: THREE.Mesh;
    };
    materials: {
        silver: THREE.MeshPhysicalMaterial;
        ["black.001"]: THREE.MeshPhysicalMaterial;
        lens: THREE.MeshPhysicalMaterial;
        ["black.006"]: THREE.MeshPhysicalMaterial;
        ["black.004"]: THREE.MeshPhysicalMaterial;
    };
};

type SmartphoneProps = {
    device: DeviceData;
    animDelay: number;
    animDuration: number;
    inView: boolean;
} & JSX.IntrinsicElements["group"];

export default function Smartphone({
    device,
    animDelay,
    animDuration,
    inView,
    ...props
}: SmartphoneProps) {
    const [delayCompleted, setDelayCompleted] = useState(animDelay <= 0);

    useTimeout(
        () => {
            setDelayCompleted(true);
        },
        animDelay,
        animDelay > 0,
    );

    const { nodes, materials, animations } = useGLTF(
        modelPath("smartphone"),
        true,
    ) as GLTFResult;

    const group = useRef<Group>(null!);
    const { actions, mixer } = useAnimations(animations, group);

    const rotationMode =
        device.type === "smartphone" && device.deviceOrientation === "portrait"
            ? 0
            : Math.PI / 2;

    const screens = useTexture(
        device.textures.map(texture => texturePath(texture)),
    );
    const currentTexture = screens[device.mainTextureIndex];

    useEffect(() => {
        if (inView && delayCompleted) {
            animations.forEach(animation => {
                const action = mixer
                    .clipAction(animation)
                    .setDuration(animDuration)
                    .setLoop(2200, 1);
                action.clampWhenFinished = true;
                action.play();
            });
        }

        return () => {
            animations.forEach(animation => {
                const action = mixer.existingAction(animation);
                if (action) {
                    action.timeScale = -1;
                    action.play();
                }
            });
        };
    }, [mixer, actions, inView, animations, delayCompleted, animDuration]);

    const { a, b } = useControls({
        a: {
            min: 0,
            max: 1,
            value: 0.1,
        },
        b: {
            min: 0,
            max: 1,
            value: 0.35,
        },
    });

    return (
        <group ref={group} rotation-z={rotationMode} {...props} dispose={null}>
            <group name='Scene'>
                <group name='root' rotation={[Math.PI / 2, 0, 0]}>
                    <mesh
                        name='back'
                        geometry={nodes.back.geometry}
                        material={materials.silver}
                        position={[-0.0175, 0.00095, 0.00353]}
                        scale={[1, 1, 1.20265]}
                    />
                    <group
                        name='backcam'
                        position={[0.62607, 2.0582, -0.20179]}
                        scale={[0.23271, 0.23271, 0.11031]}>
                        <mesh
                            name='Cylinder'
                            geometry={nodes.Cylinder.geometry}
                            material={materials["black.001"]}
                        />
                        <mesh
                            name='Cylinder_1'
                            geometry={nodes.Cylinder_1.geometry}
                            material={materials.lens}
                        />
                    </group>
                    <mesh
                        name='btn_power'
                        geometry={nodes.btn_power.geometry}
                        material={materials["black.001"]}
                        position={[1.23132, 0.06871, 0]}
                        scale={[1, 0.28149, 0.5689]}
                    />
                    <mesh
                        name='btn_volume'
                        geometry={nodes.btn_volume.geometry}
                        material={materials["black.001"]}
                        position={[1.23132, 0.97668, 0]}
                        scale={[1, 0.7143, 0.5689]}
                    />
                    <group
                        name='frontcam'
                        position={[0.97571, 2.27739, 0.17092]}
                        rotation={[Math.PI, -0.04982, Math.PI]}
                        scale={[0.08013, 0.08013, 0.03798]}>
                        <mesh
                            name='Cylinder001'
                            geometry={nodes.Cylinder001.geometry}
                            material={materials["black.001"]}
                        />
                        <mesh
                            name='Cylinder001_1'
                            geometry={nodes.Cylinder001_1.geometry}
                            material={materials.lens}
                        />
                    </group>
                    <mesh name='screen' geometry={nodes.screen.geometry}>
                        <meshStandardMaterial
                            roughness={a}
                            metalness={b}
                            side={DoubleSide}
                            map={currentTexture}
                        />
                    </mesh>
                    <mesh
                        name='smartphone'
                        geometry={nodes.smartphone.geometry}
                        material={materials["black.004"]}
                    />
                </group>
            </group>
        </group>
    );
}
